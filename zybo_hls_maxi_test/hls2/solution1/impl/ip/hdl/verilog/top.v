// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=38,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=631,HLS_SYN_LUT=826}" *)

module top (
        ap_clk,
        ap_rst_n,
        m_axi_CFG_AWVALID,
        m_axi_CFG_AWREADY,
        m_axi_CFG_AWADDR,
        m_axi_CFG_AWID,
        m_axi_CFG_AWLEN,
        m_axi_CFG_AWSIZE,
        m_axi_CFG_AWBURST,
        m_axi_CFG_AWLOCK,
        m_axi_CFG_AWCACHE,
        m_axi_CFG_AWPROT,
        m_axi_CFG_AWQOS,
        m_axi_CFG_AWREGION,
        m_axi_CFG_AWUSER,
        m_axi_CFG_WVALID,
        m_axi_CFG_WREADY,
        m_axi_CFG_WDATA,
        m_axi_CFG_WSTRB,
        m_axi_CFG_WLAST,
        m_axi_CFG_WID,
        m_axi_CFG_WUSER,
        m_axi_CFG_ARVALID,
        m_axi_CFG_ARREADY,
        m_axi_CFG_ARADDR,
        m_axi_CFG_ARID,
        m_axi_CFG_ARLEN,
        m_axi_CFG_ARSIZE,
        m_axi_CFG_ARBURST,
        m_axi_CFG_ARLOCK,
        m_axi_CFG_ARCACHE,
        m_axi_CFG_ARPROT,
        m_axi_CFG_ARQOS,
        m_axi_CFG_ARREGION,
        m_axi_CFG_ARUSER,
        m_axi_CFG_RVALID,
        m_axi_CFG_RREADY,
        m_axi_CFG_RDATA,
        m_axi_CFG_RLAST,
        m_axi_CFG_RID,
        m_axi_CFG_RUSER,
        m_axi_CFG_RRESP,
        m_axi_CFG_BVALID,
        m_axi_CFG_BREADY,
        m_axi_CFG_BRESP,
        m_axi_CFG_BID,
        m_axi_CFG_BUSER,
        s_axi_CFG_AWVALID,
        s_axi_CFG_AWREADY,
        s_axi_CFG_AWADDR,
        s_axi_CFG_WVALID,
        s_axi_CFG_WREADY,
        s_axi_CFG_WDATA,
        s_axi_CFG_WSTRB,
        s_axi_CFG_ARVALID,
        s_axi_CFG_ARREADY,
        s_axi_CFG_ARADDR,
        s_axi_CFG_RVALID,
        s_axi_CFG_RREADY,
        s_axi_CFG_RDATA,
        s_axi_CFG_RRESP,
        s_axi_CFG_BVALID,
        s_axi_CFG_BREADY,
        s_axi_CFG_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_CFG_DATA_WIDTH = 32;
parameter    C_S_AXI_CFG_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_CFG_ID_WIDTH = 1;
parameter    C_M_AXI_CFG_ADDR_WIDTH = 32;
parameter    C_M_AXI_CFG_DATA_WIDTH = 32;
parameter    C_M_AXI_CFG_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CFG_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CFG_WUSER_WIDTH = 1;
parameter    C_M_AXI_CFG_RUSER_WIDTH = 1;
parameter    C_M_AXI_CFG_BUSER_WIDTH = 1;
parameter    C_M_AXI_CFG_USER_VALUE = 0;
parameter    C_M_AXI_CFG_PROT_VALUE = 0;
parameter    C_M_AXI_CFG_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CFG_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_CFG_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_CFG_AWVALID;
input   m_axi_CFG_AWREADY;
output  [C_M_AXI_CFG_ADDR_WIDTH - 1:0] m_axi_CFG_AWADDR;
output  [C_M_AXI_CFG_ID_WIDTH - 1:0] m_axi_CFG_AWID;
output  [7:0] m_axi_CFG_AWLEN;
output  [2:0] m_axi_CFG_AWSIZE;
output  [1:0] m_axi_CFG_AWBURST;
output  [1:0] m_axi_CFG_AWLOCK;
output  [3:0] m_axi_CFG_AWCACHE;
output  [2:0] m_axi_CFG_AWPROT;
output  [3:0] m_axi_CFG_AWQOS;
output  [3:0] m_axi_CFG_AWREGION;
output  [C_M_AXI_CFG_AWUSER_WIDTH - 1:0] m_axi_CFG_AWUSER;
output   m_axi_CFG_WVALID;
input   m_axi_CFG_WREADY;
output  [C_M_AXI_CFG_DATA_WIDTH - 1:0] m_axi_CFG_WDATA;
output  [C_M_AXI_CFG_WSTRB_WIDTH - 1:0] m_axi_CFG_WSTRB;
output   m_axi_CFG_WLAST;
output  [C_M_AXI_CFG_ID_WIDTH - 1:0] m_axi_CFG_WID;
output  [C_M_AXI_CFG_WUSER_WIDTH - 1:0] m_axi_CFG_WUSER;
output   m_axi_CFG_ARVALID;
input   m_axi_CFG_ARREADY;
output  [C_M_AXI_CFG_ADDR_WIDTH - 1:0] m_axi_CFG_ARADDR;
output  [C_M_AXI_CFG_ID_WIDTH - 1:0] m_axi_CFG_ARID;
output  [7:0] m_axi_CFG_ARLEN;
output  [2:0] m_axi_CFG_ARSIZE;
output  [1:0] m_axi_CFG_ARBURST;
output  [1:0] m_axi_CFG_ARLOCK;
output  [3:0] m_axi_CFG_ARCACHE;
output  [2:0] m_axi_CFG_ARPROT;
output  [3:0] m_axi_CFG_ARQOS;
output  [3:0] m_axi_CFG_ARREGION;
output  [C_M_AXI_CFG_ARUSER_WIDTH - 1:0] m_axi_CFG_ARUSER;
input   m_axi_CFG_RVALID;
output   m_axi_CFG_RREADY;
input  [C_M_AXI_CFG_DATA_WIDTH - 1:0] m_axi_CFG_RDATA;
input   m_axi_CFG_RLAST;
input  [C_M_AXI_CFG_ID_WIDTH - 1:0] m_axi_CFG_RID;
input  [C_M_AXI_CFG_RUSER_WIDTH - 1:0] m_axi_CFG_RUSER;
input  [1:0] m_axi_CFG_RRESP;
input   m_axi_CFG_BVALID;
output   m_axi_CFG_BREADY;
input  [1:0] m_axi_CFG_BRESP;
input  [C_M_AXI_CFG_ID_WIDTH - 1:0] m_axi_CFG_BID;
input  [C_M_AXI_CFG_BUSER_WIDTH - 1:0] m_axi_CFG_BUSER;
input   s_axi_CFG_AWVALID;
output   s_axi_CFG_AWREADY;
input  [C_S_AXI_CFG_ADDR_WIDTH - 1:0] s_axi_CFG_AWADDR;
input   s_axi_CFG_WVALID;
output   s_axi_CFG_WREADY;
input  [C_S_AXI_CFG_DATA_WIDTH - 1:0] s_axi_CFG_WDATA;
input  [C_S_AXI_CFG_WSTRB_WIDTH - 1:0] s_axi_CFG_WSTRB;
input   s_axi_CFG_ARVALID;
output   s_axi_CFG_ARREADY;
input  [C_S_AXI_CFG_ADDR_WIDTH - 1:0] s_axi_CFG_ARADDR;
output   s_axi_CFG_RVALID;
input   s_axi_CFG_RREADY;
output  [C_S_AXI_CFG_DATA_WIDTH - 1:0] s_axi_CFG_RDATA;
output  [1:0] s_axi_CFG_RRESP;
output   s_axi_CFG_BVALID;
input   s_axi_CFG_BREADY;
output  [1:0] s_axi_CFG_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] values;
reg    CFG_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    CFG_blk_n_W;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_fu_109_p2;
reg    CFG_blk_n_B;
wire    ap_CS_fsm_state7;
reg    CFG_AWVALID;
wire    CFG_AWREADY;
wire   [31:0] CFG_AWADDR;
reg    CFG_WVALID;
wire    CFG_WREADY;
wire   [31:0] CFG_WDATA;
wire    CFG_ARREADY;
wire    CFG_RVALID;
wire   [31:0] CFG_RDATA;
wire    CFG_RLAST;
wire   [0:0] CFG_RID;
wire   [0:0] CFG_RUSER;
wire   [1:0] CFG_RRESP;
wire    CFG_BVALID;
reg    CFG_BREADY;
wire   [1:0] CFG_BRESP;
wire   [0:0] CFG_BID;
wire   [0:0] CFG_BUSER;
reg   [29:0] values1_reg_138;
reg    ap_sig_ioackin_CFG_AWREADY;
wire   [5:0] j_1_fu_115_p2;
reg    ap_sig_ioackin_CFG_WREADY;
reg    ap_block_state3_io;
reg   [5:0] j_reg_78;
wire   [63:0] tmp_4_fu_99_p1;
reg    ap_reg_ioackin_CFG_AWREADY;
reg    ap_reg_ioackin_CFG_WREADY;
wire   [5:0] tmp_1_fu_121_p2;
wire   [5:0] tmp_2_fu_127_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_reg_ioackin_CFG_AWREADY = 1'b0;
#0 ap_reg_ioackin_CFG_WREADY = 1'b0;
end

top_CFG_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CFG_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CFG_DATA_WIDTH ))
top_CFG_s_axi_U(
    .AWVALID(s_axi_CFG_AWVALID),
    .AWREADY(s_axi_CFG_AWREADY),
    .AWADDR(s_axi_CFG_AWADDR),
    .WVALID(s_axi_CFG_WVALID),
    .WREADY(s_axi_CFG_WREADY),
    .WDATA(s_axi_CFG_WDATA),
    .WSTRB(s_axi_CFG_WSTRB),
    .ARVALID(s_axi_CFG_ARVALID),
    .ARREADY(s_axi_CFG_ARREADY),
    .ARADDR(s_axi_CFG_ARADDR),
    .RVALID(s_axi_CFG_RVALID),
    .RREADY(s_axi_CFG_RREADY),
    .RDATA(s_axi_CFG_RDATA),
    .RRESP(s_axi_CFG_RRESP),
    .BVALID(s_axi_CFG_BVALID),
    .BREADY(s_axi_CFG_BREADY),
    .BRESP(s_axi_CFG_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .values(values)
);

top_CFG_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 4 ),
    .NUM_WRITE_OUTSTANDING( 4 ),
    .MAX_READ_BURST_LENGTH( 4 ),
    .MAX_WRITE_BURST_LENGTH( 4 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CFG_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CFG_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CFG_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CFG_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CFG_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CFG_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CFG_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CFG_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_CFG_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CFG_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CFG_CACHE_VALUE ))
top_CFG_m_axi_U(
    .AWVALID(m_axi_CFG_AWVALID),
    .AWREADY(m_axi_CFG_AWREADY),
    .AWADDR(m_axi_CFG_AWADDR),
    .AWID(m_axi_CFG_AWID),
    .AWLEN(m_axi_CFG_AWLEN),
    .AWSIZE(m_axi_CFG_AWSIZE),
    .AWBURST(m_axi_CFG_AWBURST),
    .AWLOCK(m_axi_CFG_AWLOCK),
    .AWCACHE(m_axi_CFG_AWCACHE),
    .AWPROT(m_axi_CFG_AWPROT),
    .AWQOS(m_axi_CFG_AWQOS),
    .AWREGION(m_axi_CFG_AWREGION),
    .AWUSER(m_axi_CFG_AWUSER),
    .WVALID(m_axi_CFG_WVALID),
    .WREADY(m_axi_CFG_WREADY),
    .WDATA(m_axi_CFG_WDATA),
    .WSTRB(m_axi_CFG_WSTRB),
    .WLAST(m_axi_CFG_WLAST),
    .WID(m_axi_CFG_WID),
    .WUSER(m_axi_CFG_WUSER),
    .ARVALID(m_axi_CFG_ARVALID),
    .ARREADY(m_axi_CFG_ARREADY),
    .ARADDR(m_axi_CFG_ARADDR),
    .ARID(m_axi_CFG_ARID),
    .ARLEN(m_axi_CFG_ARLEN),
    .ARSIZE(m_axi_CFG_ARSIZE),
    .ARBURST(m_axi_CFG_ARBURST),
    .ARLOCK(m_axi_CFG_ARLOCK),
    .ARCACHE(m_axi_CFG_ARCACHE),
    .ARPROT(m_axi_CFG_ARPROT),
    .ARQOS(m_axi_CFG_ARQOS),
    .ARREGION(m_axi_CFG_ARREGION),
    .ARUSER(m_axi_CFG_ARUSER),
    .RVALID(m_axi_CFG_RVALID),
    .RREADY(m_axi_CFG_RREADY),
    .RDATA(m_axi_CFG_RDATA),
    .RLAST(m_axi_CFG_RLAST),
    .RID(m_axi_CFG_RID),
    .RUSER(m_axi_CFG_RUSER),
    .RRESP(m_axi_CFG_RRESP),
    .BVALID(m_axi_CFG_BVALID),
    .BREADY(m_axi_CFG_BREADY),
    .BRESP(m_axi_CFG_BRESP),
    .BID(m_axi_CFG_BID),
    .BUSER(m_axi_CFG_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(CFG_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(CFG_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(CFG_RDATA),
    .I_RID(CFG_RID),
    .I_RUSER(CFG_RUSER),
    .I_RRESP(CFG_RRESP),
    .I_RLAST(CFG_RLAST),
    .I_AWVALID(CFG_AWVALID),
    .I_AWREADY(CFG_AWREADY),
    .I_AWADDR(CFG_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd32),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(CFG_WVALID),
    .I_WREADY(CFG_WREADY),
    .I_WDATA(CFG_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(CFG_BVALID),
    .I_BREADY(CFG_BREADY),
    .I_BRESP(CFG_BRESP),
    .I_BID(CFG_BID),
    .I_BUSER(CFG_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_CFG_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_CFG_AWREADY == 1'b1)) begin
                ap_reg_ioackin_CFG_AWREADY <= 1'b0;
            end else if ((1'b1 == CFG_AWREADY)) begin
                ap_reg_ioackin_CFG_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_CFG_WREADY <= 1'b0;
    end else begin
        if (((tmp_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            if ((1'b0 == ap_block_state3_io)) begin
                ap_reg_ioackin_CFG_WREADY <= 1'b0;
            end else if ((1'b1 == CFG_WREADY)) begin
                ap_reg_ioackin_CFG_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_109_p2 == 1'd0) & (1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_78 <= j_1_fu_115_p2;
    end else if (((ap_sig_ioackin_CFG_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_78 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        values1_reg_138 <= {{values[31:2]}};
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_CFG_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        CFG_AWVALID = 1'b1;
    end else begin
        CFG_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == CFG_BVALID) & (1'b1 == ap_CS_fsm_state7))) begin
        CFG_BREADY = 1'b1;
    end else begin
        CFG_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_109_p2 == 1'd0) & (ap_reg_ioackin_CFG_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        CFG_WVALID = 1'b1;
    end else begin
        CFG_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        CFG_blk_n_AW = m_axi_CFG_AWREADY;
    end else begin
        CFG_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        CFG_blk_n_B = m_axi_CFG_BVALID;
    end else begin
        CFG_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_fu_109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        CFG_blk_n_W = m_axi_CFG_WREADY;
    end else begin
        CFG_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == CFG_BVALID) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == CFG_BVALID) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CFG_AWREADY == 1'b0)) begin
        ap_sig_ioackin_CFG_AWREADY = CFG_AWREADY;
    end else begin
        ap_sig_ioackin_CFG_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_CFG_WREADY == 1'b0)) begin
        ap_sig_ioackin_CFG_WREADY = CFG_WREADY;
    end else begin
        ap_sig_ioackin_CFG_WREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_CFG_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_fu_109_p2 == 1'd0) & (1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((tmp_fu_109_p2 == 1'd1) & (1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == CFG_BVALID) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign CFG_AWADDR = tmp_4_fu_99_p1;

assign CFG_WDATA = tmp_2_fu_127_p2;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state3_io = ((tmp_fu_109_p2 == 1'd0) & (ap_sig_ioackin_CFG_WREADY == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign j_1_fu_115_p2 = (j_reg_78 + 6'd1);

assign tmp_1_fu_121_p2 = j_reg_78 << 6'd1;

assign tmp_2_fu_127_p2 = (tmp_1_fu_121_p2 | 6'd1);

assign tmp_4_fu_99_p1 = values1_reg_138;

assign tmp_fu_109_p2 = ((j_reg_78 == 6'd32) ? 1'b1 : 1'b0);

endmodule //top
