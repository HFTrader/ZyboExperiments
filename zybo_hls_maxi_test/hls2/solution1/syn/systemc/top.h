// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _top_HH_
#define _top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "top_CFG_s_axi.h"
#include "top_CFG_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_CFG_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_CFG_ID_WIDTH = 1,
         unsigned int C_M_AXI_CFG_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_CFG_DATA_WIDTH = 32,
         unsigned int C_M_AXI_CFG_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_CFG_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_CFG_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_CFG_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CFG_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CFG_DATA_WIDTH = 32>
struct top : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_CFG_AWVALID;
    sc_in< sc_logic > m_axi_CFG_AWREADY;
    sc_out< sc_uint<C_M_AXI_CFG_ADDR_WIDTH> > m_axi_CFG_AWADDR;
    sc_out< sc_uint<C_M_AXI_CFG_ID_WIDTH> > m_axi_CFG_AWID;
    sc_out< sc_lv<8> > m_axi_CFG_AWLEN;
    sc_out< sc_lv<3> > m_axi_CFG_AWSIZE;
    sc_out< sc_lv<2> > m_axi_CFG_AWBURST;
    sc_out< sc_lv<2> > m_axi_CFG_AWLOCK;
    sc_out< sc_lv<4> > m_axi_CFG_AWCACHE;
    sc_out< sc_lv<3> > m_axi_CFG_AWPROT;
    sc_out< sc_lv<4> > m_axi_CFG_AWQOS;
    sc_out< sc_lv<4> > m_axi_CFG_AWREGION;
    sc_out< sc_uint<C_M_AXI_CFG_AWUSER_WIDTH> > m_axi_CFG_AWUSER;
    sc_out< sc_logic > m_axi_CFG_WVALID;
    sc_in< sc_logic > m_axi_CFG_WREADY;
    sc_out< sc_uint<C_M_AXI_CFG_DATA_WIDTH> > m_axi_CFG_WDATA;
    sc_out< sc_uint<C_M_AXI_CFG_DATA_WIDTH/8> > m_axi_CFG_WSTRB;
    sc_out< sc_logic > m_axi_CFG_WLAST;
    sc_out< sc_uint<C_M_AXI_CFG_ID_WIDTH> > m_axi_CFG_WID;
    sc_out< sc_uint<C_M_AXI_CFG_WUSER_WIDTH> > m_axi_CFG_WUSER;
    sc_out< sc_logic > m_axi_CFG_ARVALID;
    sc_in< sc_logic > m_axi_CFG_ARREADY;
    sc_out< sc_uint<C_M_AXI_CFG_ADDR_WIDTH> > m_axi_CFG_ARADDR;
    sc_out< sc_uint<C_M_AXI_CFG_ID_WIDTH> > m_axi_CFG_ARID;
    sc_out< sc_lv<8> > m_axi_CFG_ARLEN;
    sc_out< sc_lv<3> > m_axi_CFG_ARSIZE;
    sc_out< sc_lv<2> > m_axi_CFG_ARBURST;
    sc_out< sc_lv<2> > m_axi_CFG_ARLOCK;
    sc_out< sc_lv<4> > m_axi_CFG_ARCACHE;
    sc_out< sc_lv<3> > m_axi_CFG_ARPROT;
    sc_out< sc_lv<4> > m_axi_CFG_ARQOS;
    sc_out< sc_lv<4> > m_axi_CFG_ARREGION;
    sc_out< sc_uint<C_M_AXI_CFG_ARUSER_WIDTH> > m_axi_CFG_ARUSER;
    sc_in< sc_logic > m_axi_CFG_RVALID;
    sc_out< sc_logic > m_axi_CFG_RREADY;
    sc_in< sc_uint<C_M_AXI_CFG_DATA_WIDTH> > m_axi_CFG_RDATA;
    sc_in< sc_logic > m_axi_CFG_RLAST;
    sc_in< sc_uint<C_M_AXI_CFG_ID_WIDTH> > m_axi_CFG_RID;
    sc_in< sc_uint<C_M_AXI_CFG_RUSER_WIDTH> > m_axi_CFG_RUSER;
    sc_in< sc_lv<2> > m_axi_CFG_RRESP;
    sc_in< sc_logic > m_axi_CFG_BVALID;
    sc_out< sc_logic > m_axi_CFG_BREADY;
    sc_in< sc_lv<2> > m_axi_CFG_BRESP;
    sc_in< sc_uint<C_M_AXI_CFG_ID_WIDTH> > m_axi_CFG_BID;
    sc_in< sc_uint<C_M_AXI_CFG_BUSER_WIDTH> > m_axi_CFG_BUSER;
    sc_in< sc_logic > s_axi_CFG_AWVALID;
    sc_out< sc_logic > s_axi_CFG_AWREADY;
    sc_in< sc_uint<C_S_AXI_CFG_ADDR_WIDTH> > s_axi_CFG_AWADDR;
    sc_in< sc_logic > s_axi_CFG_WVALID;
    sc_out< sc_logic > s_axi_CFG_WREADY;
    sc_in< sc_uint<C_S_AXI_CFG_DATA_WIDTH> > s_axi_CFG_WDATA;
    sc_in< sc_uint<C_S_AXI_CFG_DATA_WIDTH/8> > s_axi_CFG_WSTRB;
    sc_in< sc_logic > s_axi_CFG_ARVALID;
    sc_out< sc_logic > s_axi_CFG_ARREADY;
    sc_in< sc_uint<C_S_AXI_CFG_ADDR_WIDTH> > s_axi_CFG_ARADDR;
    sc_out< sc_logic > s_axi_CFG_RVALID;
    sc_in< sc_logic > s_axi_CFG_RREADY;
    sc_out< sc_uint<C_S_AXI_CFG_DATA_WIDTH> > s_axi_CFG_RDATA;
    sc_out< sc_lv<2> > s_axi_CFG_RRESP;
    sc_out< sc_logic > s_axi_CFG_BVALID;
    sc_in< sc_logic > s_axi_CFG_BREADY;
    sc_out< sc_lv<2> > s_axi_CFG_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<2> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const6;
    sc_signal< sc_lv<4> > ap_var_for_const8;


    // Module declarations
    top(sc_module_name name);
    SC_HAS_PROCESS(top);

    ~top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    top_CFG_s_axi<C_S_AXI_CFG_ADDR_WIDTH,C_S_AXI_CFG_DATA_WIDTH>* top_CFG_s_axi_U;
    top_CFG_m_axi<32,32,5,4,4,4,4,C_M_AXI_CFG_ID_WIDTH,C_M_AXI_CFG_ADDR_WIDTH,C_M_AXI_CFG_DATA_WIDTH,C_M_AXI_CFG_AWUSER_WIDTH,C_M_AXI_CFG_ARUSER_WIDTH,C_M_AXI_CFG_WUSER_WIDTH,C_M_AXI_CFG_RUSER_WIDTH,C_M_AXI_CFG_BUSER_WIDTH,C_M_AXI_CFG_USER_VALUE,C_M_AXI_CFG_PROT_VALUE,C_M_AXI_CFG_CACHE_VALUE>* top_CFG_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > values;
    sc_signal< sc_logic > CFG_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > CFG_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_fu_109_p2;
    sc_signal< sc_logic > CFG_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > CFG_AWVALID;
    sc_signal< sc_logic > CFG_AWREADY;
    sc_signal< sc_lv<32> > CFG_AWADDR;
    sc_signal< sc_logic > CFG_WVALID;
    sc_signal< sc_logic > CFG_WREADY;
    sc_signal< sc_lv<32> > CFG_WDATA;
    sc_signal< sc_logic > CFG_ARREADY;
    sc_signal< sc_logic > CFG_RVALID;
    sc_signal< sc_lv<32> > CFG_RDATA;
    sc_signal< sc_logic > CFG_RLAST;
    sc_signal< sc_lv<1> > CFG_RID;
    sc_signal< sc_lv<1> > CFG_RUSER;
    sc_signal< sc_lv<2> > CFG_RRESP;
    sc_signal< sc_logic > CFG_BVALID;
    sc_signal< sc_logic > CFG_BREADY;
    sc_signal< sc_lv<2> > CFG_BRESP;
    sc_signal< sc_lv<1> > CFG_BID;
    sc_signal< sc_lv<1> > CFG_BUSER;
    sc_signal< sc_lv<30> > values1_reg_138;
    sc_signal< sc_logic > ap_sig_ioackin_CFG_AWREADY;
    sc_signal< sc_lv<6> > j_1_fu_115_p2;
    sc_signal< sc_logic > ap_sig_ioackin_CFG_WREADY;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_lv<6> > j_reg_78;
    sc_signal< sc_lv<64> > tmp_4_fu_99_p1;
    sc_signal< sc_logic > ap_reg_ioackin_CFG_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_CFG_WREADY;
    sc_signal< sc_lv<6> > tmp_1_fu_121_p2;
    sc_signal< sc_lv<6> > tmp_2_fu_127_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_CFG_USER_VALUE;
    static const int C_M_AXI_CFG_PROT_VALUE;
    static const int C_M_AXI_CFG_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const bool ap_const_boolean_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_CFG_AWADDR();
    void thread_CFG_AWVALID();
    void thread_CFG_BREADY();
    void thread_CFG_WDATA();
    void thread_CFG_WVALID();
    void thread_CFG_blk_n_AW();
    void thread_CFG_blk_n_B();
    void thread_CFG_blk_n_W();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state3_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_CFG_AWREADY();
    void thread_ap_sig_ioackin_CFG_WREADY();
    void thread_j_1_fu_115_p2();
    void thread_tmp_1_fu_121_p2();
    void thread_tmp_2_fu_127_p2();
    void thread_tmp_4_fu_99_p1();
    void thread_tmp_fu_109_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
