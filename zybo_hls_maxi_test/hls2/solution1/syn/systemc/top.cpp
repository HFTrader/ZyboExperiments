// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic top::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> top::ap_ST_fsm_state1 = "1";
const sc_lv<7> top::ap_ST_fsm_state2 = "10";
const sc_lv<7> top::ap_ST_fsm_state3 = "100";
const sc_lv<7> top::ap_ST_fsm_state4 = "1000";
const sc_lv<7> top::ap_ST_fsm_state5 = "10000";
const sc_lv<7> top::ap_ST_fsm_state6 = "100000";
const sc_lv<7> top::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> top::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> top::ap_const_lv32_1 = "1";
const sc_lv<32> top::ap_const_lv32_2 = "10";
const sc_lv<1> top::ap_const_lv1_0 = "0";
const sc_lv<32> top::ap_const_lv32_6 = "110";
const int top::C_S_AXI_DATA_WIDTH = "100000";
const int top::C_M_AXI_CFG_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int top::C_M_AXI_CFG_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int top::C_M_AXI_CFG_CACHE_VALUE = "11";
const int top::C_M_AXI_DATA_WIDTH = "100000";
const bool top::ap_const_boolean_0 = false;
const sc_lv<6> top::ap_const_lv6_0 = "000000";
const sc_lv<32> top::ap_const_lv32_20 = "100000";
const sc_lv<3> top::ap_const_lv3_0 = "000";
const sc_lv<2> top::ap_const_lv2_0 = "00";
const sc_lv<4> top::ap_const_lv4_0 = "0000";
const sc_lv<4> top::ap_const_lv4_F = "1111";
const sc_lv<32> top::ap_const_lv32_1F = "11111";
const sc_lv<6> top::ap_const_lv6_20 = "100000";
const sc_lv<6> top::ap_const_lv6_1 = "1";
const sc_lv<1> top::ap_const_lv1_1 = "1";
const bool top::ap_const_boolean_1 = true;

top::top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    top_CFG_s_axi_U = new top_CFG_s_axi<C_S_AXI_CFG_ADDR_WIDTH,C_S_AXI_CFG_DATA_WIDTH>("top_CFG_s_axi_U");
    top_CFG_s_axi_U->AWVALID(s_axi_CFG_AWVALID);
    top_CFG_s_axi_U->AWREADY(s_axi_CFG_AWREADY);
    top_CFG_s_axi_U->AWADDR(s_axi_CFG_AWADDR);
    top_CFG_s_axi_U->WVALID(s_axi_CFG_WVALID);
    top_CFG_s_axi_U->WREADY(s_axi_CFG_WREADY);
    top_CFG_s_axi_U->WDATA(s_axi_CFG_WDATA);
    top_CFG_s_axi_U->WSTRB(s_axi_CFG_WSTRB);
    top_CFG_s_axi_U->ARVALID(s_axi_CFG_ARVALID);
    top_CFG_s_axi_U->ARREADY(s_axi_CFG_ARREADY);
    top_CFG_s_axi_U->ARADDR(s_axi_CFG_ARADDR);
    top_CFG_s_axi_U->RVALID(s_axi_CFG_RVALID);
    top_CFG_s_axi_U->RREADY(s_axi_CFG_RREADY);
    top_CFG_s_axi_U->RDATA(s_axi_CFG_RDATA);
    top_CFG_s_axi_U->RRESP(s_axi_CFG_RRESP);
    top_CFG_s_axi_U->BVALID(s_axi_CFG_BVALID);
    top_CFG_s_axi_U->BREADY(s_axi_CFG_BREADY);
    top_CFG_s_axi_U->BRESP(s_axi_CFG_BRESP);
    top_CFG_s_axi_U->ACLK(ap_clk);
    top_CFG_s_axi_U->ARESET(ap_rst_n_inv);
    top_CFG_s_axi_U->ACLK_EN(ap_var_for_const0);
    top_CFG_s_axi_U->ap_start(ap_start);
    top_CFG_s_axi_U->interrupt(interrupt);
    top_CFG_s_axi_U->ap_ready(ap_ready);
    top_CFG_s_axi_U->ap_done(ap_done);
    top_CFG_s_axi_U->ap_idle(ap_idle);
    top_CFG_s_axi_U->values(values);
    top_CFG_m_axi_U = new top_CFG_m_axi<32,32,5,4,4,4,4,C_M_AXI_CFG_ID_WIDTH,C_M_AXI_CFG_ADDR_WIDTH,C_M_AXI_CFG_DATA_WIDTH,C_M_AXI_CFG_AWUSER_WIDTH,C_M_AXI_CFG_ARUSER_WIDTH,C_M_AXI_CFG_WUSER_WIDTH,C_M_AXI_CFG_RUSER_WIDTH,C_M_AXI_CFG_BUSER_WIDTH,C_M_AXI_CFG_USER_VALUE,C_M_AXI_CFG_PROT_VALUE,C_M_AXI_CFG_CACHE_VALUE>("top_CFG_m_axi_U");
    top_CFG_m_axi_U->AWVALID(m_axi_CFG_AWVALID);
    top_CFG_m_axi_U->AWREADY(m_axi_CFG_AWREADY);
    top_CFG_m_axi_U->AWADDR(m_axi_CFG_AWADDR);
    top_CFG_m_axi_U->AWID(m_axi_CFG_AWID);
    top_CFG_m_axi_U->AWLEN(m_axi_CFG_AWLEN);
    top_CFG_m_axi_U->AWSIZE(m_axi_CFG_AWSIZE);
    top_CFG_m_axi_U->AWBURST(m_axi_CFG_AWBURST);
    top_CFG_m_axi_U->AWLOCK(m_axi_CFG_AWLOCK);
    top_CFG_m_axi_U->AWCACHE(m_axi_CFG_AWCACHE);
    top_CFG_m_axi_U->AWPROT(m_axi_CFG_AWPROT);
    top_CFG_m_axi_U->AWQOS(m_axi_CFG_AWQOS);
    top_CFG_m_axi_U->AWREGION(m_axi_CFG_AWREGION);
    top_CFG_m_axi_U->AWUSER(m_axi_CFG_AWUSER);
    top_CFG_m_axi_U->WVALID(m_axi_CFG_WVALID);
    top_CFG_m_axi_U->WREADY(m_axi_CFG_WREADY);
    top_CFG_m_axi_U->WDATA(m_axi_CFG_WDATA);
    top_CFG_m_axi_U->WSTRB(m_axi_CFG_WSTRB);
    top_CFG_m_axi_U->WLAST(m_axi_CFG_WLAST);
    top_CFG_m_axi_U->WID(m_axi_CFG_WID);
    top_CFG_m_axi_U->WUSER(m_axi_CFG_WUSER);
    top_CFG_m_axi_U->ARVALID(m_axi_CFG_ARVALID);
    top_CFG_m_axi_U->ARREADY(m_axi_CFG_ARREADY);
    top_CFG_m_axi_U->ARADDR(m_axi_CFG_ARADDR);
    top_CFG_m_axi_U->ARID(m_axi_CFG_ARID);
    top_CFG_m_axi_U->ARLEN(m_axi_CFG_ARLEN);
    top_CFG_m_axi_U->ARSIZE(m_axi_CFG_ARSIZE);
    top_CFG_m_axi_U->ARBURST(m_axi_CFG_ARBURST);
    top_CFG_m_axi_U->ARLOCK(m_axi_CFG_ARLOCK);
    top_CFG_m_axi_U->ARCACHE(m_axi_CFG_ARCACHE);
    top_CFG_m_axi_U->ARPROT(m_axi_CFG_ARPROT);
    top_CFG_m_axi_U->ARQOS(m_axi_CFG_ARQOS);
    top_CFG_m_axi_U->ARREGION(m_axi_CFG_ARREGION);
    top_CFG_m_axi_U->ARUSER(m_axi_CFG_ARUSER);
    top_CFG_m_axi_U->RVALID(m_axi_CFG_RVALID);
    top_CFG_m_axi_U->RREADY(m_axi_CFG_RREADY);
    top_CFG_m_axi_U->RDATA(m_axi_CFG_RDATA);
    top_CFG_m_axi_U->RLAST(m_axi_CFG_RLAST);
    top_CFG_m_axi_U->RID(m_axi_CFG_RID);
    top_CFG_m_axi_U->RUSER(m_axi_CFG_RUSER);
    top_CFG_m_axi_U->RRESP(m_axi_CFG_RRESP);
    top_CFG_m_axi_U->BVALID(m_axi_CFG_BVALID);
    top_CFG_m_axi_U->BREADY(m_axi_CFG_BREADY);
    top_CFG_m_axi_U->BRESP(m_axi_CFG_BRESP);
    top_CFG_m_axi_U->BID(m_axi_CFG_BID);
    top_CFG_m_axi_U->BUSER(m_axi_CFG_BUSER);
    top_CFG_m_axi_U->ACLK(ap_clk);
    top_CFG_m_axi_U->ARESET(ap_rst_n_inv);
    top_CFG_m_axi_U->ACLK_EN(ap_var_for_const0);
    top_CFG_m_axi_U->I_ARVALID(ap_var_for_const1);
    top_CFG_m_axi_U->I_ARREADY(CFG_ARREADY);
    top_CFG_m_axi_U->I_ARADDR(ap_var_for_const2);
    top_CFG_m_axi_U->I_ARID(ap_var_for_const3);
    top_CFG_m_axi_U->I_ARLEN(ap_var_for_const2);
    top_CFG_m_axi_U->I_ARSIZE(ap_var_for_const4);
    top_CFG_m_axi_U->I_ARLOCK(ap_var_for_const5);
    top_CFG_m_axi_U->I_ARCACHE(ap_var_for_const6);
    top_CFG_m_axi_U->I_ARQOS(ap_var_for_const6);
    top_CFG_m_axi_U->I_ARPROT(ap_var_for_const4);
    top_CFG_m_axi_U->I_ARUSER(ap_var_for_const3);
    top_CFG_m_axi_U->I_ARBURST(ap_var_for_const5);
    top_CFG_m_axi_U->I_ARREGION(ap_var_for_const6);
    top_CFG_m_axi_U->I_RVALID(CFG_RVALID);
    top_CFG_m_axi_U->I_RREADY(ap_var_for_const1);
    top_CFG_m_axi_U->I_RDATA(CFG_RDATA);
    top_CFG_m_axi_U->I_RID(CFG_RID);
    top_CFG_m_axi_U->I_RUSER(CFG_RUSER);
    top_CFG_m_axi_U->I_RRESP(CFG_RRESP);
    top_CFG_m_axi_U->I_RLAST(CFG_RLAST);
    top_CFG_m_axi_U->I_AWVALID(CFG_AWVALID);
    top_CFG_m_axi_U->I_AWREADY(CFG_AWREADY);
    top_CFG_m_axi_U->I_AWADDR(CFG_AWADDR);
    top_CFG_m_axi_U->I_AWID(ap_var_for_const3);
    top_CFG_m_axi_U->I_AWLEN(ap_var_for_const7);
    top_CFG_m_axi_U->I_AWSIZE(ap_var_for_const4);
    top_CFG_m_axi_U->I_AWLOCK(ap_var_for_const5);
    top_CFG_m_axi_U->I_AWCACHE(ap_var_for_const6);
    top_CFG_m_axi_U->I_AWQOS(ap_var_for_const6);
    top_CFG_m_axi_U->I_AWPROT(ap_var_for_const4);
    top_CFG_m_axi_U->I_AWUSER(ap_var_for_const3);
    top_CFG_m_axi_U->I_AWBURST(ap_var_for_const5);
    top_CFG_m_axi_U->I_AWREGION(ap_var_for_const6);
    top_CFG_m_axi_U->I_WVALID(CFG_WVALID);
    top_CFG_m_axi_U->I_WREADY(CFG_WREADY);
    top_CFG_m_axi_U->I_WDATA(CFG_WDATA);
    top_CFG_m_axi_U->I_WID(ap_var_for_const3);
    top_CFG_m_axi_U->I_WUSER(ap_var_for_const3);
    top_CFG_m_axi_U->I_WLAST(ap_var_for_const1);
    top_CFG_m_axi_U->I_WSTRB(ap_var_for_const8);
    top_CFG_m_axi_U->I_BVALID(CFG_BVALID);
    top_CFG_m_axi_U->I_BREADY(CFG_BREADY);
    top_CFG_m_axi_U->I_BRESP(CFG_BRESP);
    top_CFG_m_axi_U->I_BID(CFG_BID);
    top_CFG_m_axi_U->I_BUSER(CFG_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_CFG_AWADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_4_fu_99_p1 );
    sensitive << ( ap_reg_ioackin_CFG_AWREADY );

    SC_METHOD(thread_CFG_AWVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_CFG_AWREADY );

    SC_METHOD(thread_CFG_BREADY);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( CFG_BVALID );

    SC_METHOD(thread_CFG_WDATA);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_109_p2 );
    sensitive << ( ap_reg_ioackin_CFG_WREADY );
    sensitive << ( tmp_2_fu_127_p2 );

    SC_METHOD(thread_CFG_WVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_109_p2 );
    sensitive << ( ap_reg_ioackin_CFG_WREADY );

    SC_METHOD(thread_CFG_blk_n_AW);
    sensitive << ( m_axi_CFG_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_CFG_blk_n_B);
    sensitive << ( m_axi_CFG_BVALID );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_CFG_blk_n_W);
    sensitive << ( m_axi_CFG_WREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_109_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( tmp_fu_109_p2 );
    sensitive << ( ap_sig_ioackin_CFG_WREADY );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( CFG_BVALID );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( CFG_BVALID );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_CFG_AWREADY);
    sensitive << ( CFG_AWREADY );
    sensitive << ( ap_reg_ioackin_CFG_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_CFG_WREADY);
    sensitive << ( CFG_WREADY );
    sensitive << ( ap_reg_ioackin_CFG_WREADY );

    SC_METHOD(thread_j_1_fu_115_p2);
    sensitive << ( j_reg_78 );

    SC_METHOD(thread_tmp_1_fu_121_p2);
    sensitive << ( j_reg_78 );

    SC_METHOD(thread_tmp_2_fu_127_p2);
    sensitive << ( tmp_1_fu_121_p2 );

    SC_METHOD(thread_tmp_4_fu_99_p1);
    sensitive << ( values1_reg_138 );

    SC_METHOD(thread_tmp_fu_109_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( j_reg_78 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_109_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( CFG_BVALID );
    sensitive << ( ap_sig_ioackin_CFG_AWREADY );
    sensitive << ( ap_block_state3_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const8);

    ap_CS_fsm = "0000001";
    ap_reg_ioackin_CFG_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_CFG_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_CFG_AWVALID, "(port)m_axi_CFG_AWVALID");
    sc_trace(mVcdFile, m_axi_CFG_AWREADY, "(port)m_axi_CFG_AWREADY");
    sc_trace(mVcdFile, m_axi_CFG_AWADDR, "(port)m_axi_CFG_AWADDR");
    sc_trace(mVcdFile, m_axi_CFG_AWID, "(port)m_axi_CFG_AWID");
    sc_trace(mVcdFile, m_axi_CFG_AWLEN, "(port)m_axi_CFG_AWLEN");
    sc_trace(mVcdFile, m_axi_CFG_AWSIZE, "(port)m_axi_CFG_AWSIZE");
    sc_trace(mVcdFile, m_axi_CFG_AWBURST, "(port)m_axi_CFG_AWBURST");
    sc_trace(mVcdFile, m_axi_CFG_AWLOCK, "(port)m_axi_CFG_AWLOCK");
    sc_trace(mVcdFile, m_axi_CFG_AWCACHE, "(port)m_axi_CFG_AWCACHE");
    sc_trace(mVcdFile, m_axi_CFG_AWPROT, "(port)m_axi_CFG_AWPROT");
    sc_trace(mVcdFile, m_axi_CFG_AWQOS, "(port)m_axi_CFG_AWQOS");
    sc_trace(mVcdFile, m_axi_CFG_AWREGION, "(port)m_axi_CFG_AWREGION");
    sc_trace(mVcdFile, m_axi_CFG_AWUSER, "(port)m_axi_CFG_AWUSER");
    sc_trace(mVcdFile, m_axi_CFG_WVALID, "(port)m_axi_CFG_WVALID");
    sc_trace(mVcdFile, m_axi_CFG_WREADY, "(port)m_axi_CFG_WREADY");
    sc_trace(mVcdFile, m_axi_CFG_WDATA, "(port)m_axi_CFG_WDATA");
    sc_trace(mVcdFile, m_axi_CFG_WSTRB, "(port)m_axi_CFG_WSTRB");
    sc_trace(mVcdFile, m_axi_CFG_WLAST, "(port)m_axi_CFG_WLAST");
    sc_trace(mVcdFile, m_axi_CFG_WID, "(port)m_axi_CFG_WID");
    sc_trace(mVcdFile, m_axi_CFG_WUSER, "(port)m_axi_CFG_WUSER");
    sc_trace(mVcdFile, m_axi_CFG_ARVALID, "(port)m_axi_CFG_ARVALID");
    sc_trace(mVcdFile, m_axi_CFG_ARREADY, "(port)m_axi_CFG_ARREADY");
    sc_trace(mVcdFile, m_axi_CFG_ARADDR, "(port)m_axi_CFG_ARADDR");
    sc_trace(mVcdFile, m_axi_CFG_ARID, "(port)m_axi_CFG_ARID");
    sc_trace(mVcdFile, m_axi_CFG_ARLEN, "(port)m_axi_CFG_ARLEN");
    sc_trace(mVcdFile, m_axi_CFG_ARSIZE, "(port)m_axi_CFG_ARSIZE");
    sc_trace(mVcdFile, m_axi_CFG_ARBURST, "(port)m_axi_CFG_ARBURST");
    sc_trace(mVcdFile, m_axi_CFG_ARLOCK, "(port)m_axi_CFG_ARLOCK");
    sc_trace(mVcdFile, m_axi_CFG_ARCACHE, "(port)m_axi_CFG_ARCACHE");
    sc_trace(mVcdFile, m_axi_CFG_ARPROT, "(port)m_axi_CFG_ARPROT");
    sc_trace(mVcdFile, m_axi_CFG_ARQOS, "(port)m_axi_CFG_ARQOS");
    sc_trace(mVcdFile, m_axi_CFG_ARREGION, "(port)m_axi_CFG_ARREGION");
    sc_trace(mVcdFile, m_axi_CFG_ARUSER, "(port)m_axi_CFG_ARUSER");
    sc_trace(mVcdFile, m_axi_CFG_RVALID, "(port)m_axi_CFG_RVALID");
    sc_trace(mVcdFile, m_axi_CFG_RREADY, "(port)m_axi_CFG_RREADY");
    sc_trace(mVcdFile, m_axi_CFG_RDATA, "(port)m_axi_CFG_RDATA");
    sc_trace(mVcdFile, m_axi_CFG_RLAST, "(port)m_axi_CFG_RLAST");
    sc_trace(mVcdFile, m_axi_CFG_RID, "(port)m_axi_CFG_RID");
    sc_trace(mVcdFile, m_axi_CFG_RUSER, "(port)m_axi_CFG_RUSER");
    sc_trace(mVcdFile, m_axi_CFG_RRESP, "(port)m_axi_CFG_RRESP");
    sc_trace(mVcdFile, m_axi_CFG_BVALID, "(port)m_axi_CFG_BVALID");
    sc_trace(mVcdFile, m_axi_CFG_BREADY, "(port)m_axi_CFG_BREADY");
    sc_trace(mVcdFile, m_axi_CFG_BRESP, "(port)m_axi_CFG_BRESP");
    sc_trace(mVcdFile, m_axi_CFG_BID, "(port)m_axi_CFG_BID");
    sc_trace(mVcdFile, m_axi_CFG_BUSER, "(port)m_axi_CFG_BUSER");
    sc_trace(mVcdFile, s_axi_CFG_AWVALID, "(port)s_axi_CFG_AWVALID");
    sc_trace(mVcdFile, s_axi_CFG_AWREADY, "(port)s_axi_CFG_AWREADY");
    sc_trace(mVcdFile, s_axi_CFG_AWADDR, "(port)s_axi_CFG_AWADDR");
    sc_trace(mVcdFile, s_axi_CFG_WVALID, "(port)s_axi_CFG_WVALID");
    sc_trace(mVcdFile, s_axi_CFG_WREADY, "(port)s_axi_CFG_WREADY");
    sc_trace(mVcdFile, s_axi_CFG_WDATA, "(port)s_axi_CFG_WDATA");
    sc_trace(mVcdFile, s_axi_CFG_WSTRB, "(port)s_axi_CFG_WSTRB");
    sc_trace(mVcdFile, s_axi_CFG_ARVALID, "(port)s_axi_CFG_ARVALID");
    sc_trace(mVcdFile, s_axi_CFG_ARREADY, "(port)s_axi_CFG_ARREADY");
    sc_trace(mVcdFile, s_axi_CFG_ARADDR, "(port)s_axi_CFG_ARADDR");
    sc_trace(mVcdFile, s_axi_CFG_RVALID, "(port)s_axi_CFG_RVALID");
    sc_trace(mVcdFile, s_axi_CFG_RREADY, "(port)s_axi_CFG_RREADY");
    sc_trace(mVcdFile, s_axi_CFG_RDATA, "(port)s_axi_CFG_RDATA");
    sc_trace(mVcdFile, s_axi_CFG_RRESP, "(port)s_axi_CFG_RRESP");
    sc_trace(mVcdFile, s_axi_CFG_BVALID, "(port)s_axi_CFG_BVALID");
    sc_trace(mVcdFile, s_axi_CFG_BREADY, "(port)s_axi_CFG_BREADY");
    sc_trace(mVcdFile, s_axi_CFG_BRESP, "(port)s_axi_CFG_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, values, "values");
    sc_trace(mVcdFile, CFG_blk_n_AW, "CFG_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, CFG_blk_n_W, "CFG_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_fu_109_p2, "tmp_fu_109_p2");
    sc_trace(mVcdFile, CFG_blk_n_B, "CFG_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, CFG_AWVALID, "CFG_AWVALID");
    sc_trace(mVcdFile, CFG_AWREADY, "CFG_AWREADY");
    sc_trace(mVcdFile, CFG_AWADDR, "CFG_AWADDR");
    sc_trace(mVcdFile, CFG_WVALID, "CFG_WVALID");
    sc_trace(mVcdFile, CFG_WREADY, "CFG_WREADY");
    sc_trace(mVcdFile, CFG_WDATA, "CFG_WDATA");
    sc_trace(mVcdFile, CFG_ARREADY, "CFG_ARREADY");
    sc_trace(mVcdFile, CFG_RVALID, "CFG_RVALID");
    sc_trace(mVcdFile, CFG_RDATA, "CFG_RDATA");
    sc_trace(mVcdFile, CFG_RLAST, "CFG_RLAST");
    sc_trace(mVcdFile, CFG_RID, "CFG_RID");
    sc_trace(mVcdFile, CFG_RUSER, "CFG_RUSER");
    sc_trace(mVcdFile, CFG_RRESP, "CFG_RRESP");
    sc_trace(mVcdFile, CFG_BVALID, "CFG_BVALID");
    sc_trace(mVcdFile, CFG_BREADY, "CFG_BREADY");
    sc_trace(mVcdFile, CFG_BRESP, "CFG_BRESP");
    sc_trace(mVcdFile, CFG_BID, "CFG_BID");
    sc_trace(mVcdFile, CFG_BUSER, "CFG_BUSER");
    sc_trace(mVcdFile, values1_reg_138, "values1_reg_138");
    sc_trace(mVcdFile, ap_sig_ioackin_CFG_AWREADY, "ap_sig_ioackin_CFG_AWREADY");
    sc_trace(mVcdFile, j_1_fu_115_p2, "j_1_fu_115_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_CFG_WREADY, "ap_sig_ioackin_CFG_WREADY");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, j_reg_78, "j_reg_78");
    sc_trace(mVcdFile, tmp_4_fu_99_p1, "tmp_4_fu_99_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_CFG_AWREADY, "ap_reg_ioackin_CFG_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_CFG_WREADY, "ap_reg_ioackin_CFG_WREADY");
    sc_trace(mVcdFile, tmp_1_fu_121_p2, "tmp_1_fu_121_p2");
    sc_trace(mVcdFile, tmp_2_fu_127_p2, "tmp_2_fu_127_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("top.hdltvin.dat");
    mHdltvoutHandle.open("top.hdltvout.dat");
}

top::~top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete top_CFG_s_axi_U;
    delete top_CFG_m_axi_U;
}

void top::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void top::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void top::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void top::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void top::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_20;
}

void top::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void top::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void top::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void top::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv4_F;
}

void top::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_CFG_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_CFG_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_CFG_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, CFG_AWREADY.read())) {
                ap_reg_ioackin_CFG_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_CFG_WREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_fu_109_p2.read(), ap_const_lv1_0))) {
            if (esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_CFG_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, CFG_WREADY.read())) {
                ap_reg_ioackin_CFG_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_109_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
        j_reg_78 = j_1_fu_115_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_sig_ioackin_CFG_AWREADY.read(), ap_const_logic_1))) {
        j_reg_78 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        values1_reg_138 = values.read().range(31, 2);
    }
}

void top::thread_CFG_AWADDR() {
    CFG_AWADDR =  (sc_lv<32>) (tmp_4_fu_99_p1.read());
}

void top::thread_CFG_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_CFG_AWREADY.read()))) {
        CFG_AWVALID = ap_const_logic_1;
    } else {
        CFG_AWVALID = ap_const_logic_0;
    }
}

void top::thread_CFG_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(CFG_BVALID.read(), ap_const_logic_1))) {
        CFG_BREADY = ap_const_logic_1;
    } else {
        CFG_BREADY = ap_const_logic_0;
    }
}

void top::thread_CFG_WDATA() {
    CFG_WDATA = esl_zext<32,6>(tmp_2_fu_127_p2.read());
}

void top::thread_CFG_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_109_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_CFG_WREADY.read()))) {
        CFG_WVALID = ap_const_logic_1;
    } else {
        CFG_WVALID = ap_const_logic_0;
    }
}

void top::thread_CFG_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        CFG_blk_n_AW = m_axi_CFG_AWREADY.read();
    } else {
        CFG_blk_n_AW = ap_const_logic_1;
    }
}

void top::thread_CFG_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        CFG_blk_n_B = m_axi_CFG_BVALID.read();
    } else {
        CFG_blk_n_B = ap_const_logic_1;
    }
}

void top::thread_CFG_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_109_p2.read(), ap_const_lv1_0))) {
        CFG_blk_n_W = m_axi_CFG_WREADY.read();
    } else {
        CFG_blk_n_W = ap_const_logic_1;
    }
}

void top::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void top::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void top::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void top::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void top::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(tmp_fu_109_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_CFG_WREADY.read()));
}

void top::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(CFG_BVALID.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void top::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void top::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(CFG_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void top::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void top::thread_ap_sig_ioackin_CFG_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_CFG_AWREADY.read())) {
        ap_sig_ioackin_CFG_AWREADY = CFG_AWREADY.read();
    } else {
        ap_sig_ioackin_CFG_AWREADY = ap_const_logic_1;
    }
}

void top::thread_ap_sig_ioackin_CFG_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_CFG_WREADY.read())) {
        ap_sig_ioackin_CFG_WREADY = CFG_WREADY.read();
    } else {
        ap_sig_ioackin_CFG_WREADY = ap_const_logic_1;
    }
}

void top::thread_j_1_fu_115_p2() {
    j_1_fu_115_p2 = (!j_reg_78.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_reg_78.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void top::thread_tmp_1_fu_121_p2() {
    tmp_1_fu_121_p2 = (!ap_const_lv6_1.is_01())? sc_lv<6>(): j_reg_78.read() << (unsigned short)ap_const_lv6_1.to_uint();
}

void top::thread_tmp_2_fu_127_p2() {
    tmp_2_fu_127_p2 = (tmp_1_fu_121_p2.read() | ap_const_lv6_1);
}

void top::thread_tmp_4_fu_99_p1() {
    tmp_4_fu_99_p1 = esl_zext<64,30>(values1_reg_138.read());
}

void top::thread_tmp_fu_109_p2() {
    tmp_fu_109_p2 = (!j_reg_78.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_78.read() == ap_const_lv6_20);
}

void top::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_CFG_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_fu_109_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_109_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(CFG_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_CFG_AWVALID\" :  \"" << m_axi_CFG_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_AWREADY\" :  \"" << m_axi_CFG_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_AWADDR\" :  \"" << m_axi_CFG_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_AWID\" :  \"" << m_axi_CFG_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_AWLEN\" :  \"" << m_axi_CFG_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_AWSIZE\" :  \"" << m_axi_CFG_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_AWBURST\" :  \"" << m_axi_CFG_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_AWLOCK\" :  \"" << m_axi_CFG_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_AWCACHE\" :  \"" << m_axi_CFG_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_AWPROT\" :  \"" << m_axi_CFG_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_AWQOS\" :  \"" << m_axi_CFG_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_AWREGION\" :  \"" << m_axi_CFG_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_AWUSER\" :  \"" << m_axi_CFG_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_WVALID\" :  \"" << m_axi_CFG_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_WREADY\" :  \"" << m_axi_CFG_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_WDATA\" :  \"" << m_axi_CFG_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_WSTRB\" :  \"" << m_axi_CFG_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_WLAST\" :  \"" << m_axi_CFG_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_WID\" :  \"" << m_axi_CFG_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_WUSER\" :  \"" << m_axi_CFG_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARVALID\" :  \"" << m_axi_CFG_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_ARREADY\" :  \"" << m_axi_CFG_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARADDR\" :  \"" << m_axi_CFG_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARID\" :  \"" << m_axi_CFG_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARLEN\" :  \"" << m_axi_CFG_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARSIZE\" :  \"" << m_axi_CFG_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARBURST\" :  \"" << m_axi_CFG_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARLOCK\" :  \"" << m_axi_CFG_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARCACHE\" :  \"" << m_axi_CFG_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARPROT\" :  \"" << m_axi_CFG_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARQOS\" :  \"" << m_axi_CFG_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARREGION\" :  \"" << m_axi_CFG_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_ARUSER\" :  \"" << m_axi_CFG_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_RVALID\" :  \"" << m_axi_CFG_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_RREADY\" :  \"" << m_axi_CFG_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_RDATA\" :  \"" << m_axi_CFG_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_RLAST\" :  \"" << m_axi_CFG_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_RID\" :  \"" << m_axi_CFG_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_RUSER\" :  \"" << m_axi_CFG_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_RRESP\" :  \"" << m_axi_CFG_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_BVALID\" :  \"" << m_axi_CFG_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CFG_BREADY\" :  \"" << m_axi_CFG_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_BRESP\" :  \"" << m_axi_CFG_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_BID\" :  \"" << m_axi_CFG_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CFG_BUSER\" :  \"" << m_axi_CFG_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CFG_AWVALID\" :  \"" << s_axi_CFG_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CFG_AWREADY\" :  \"" << s_axi_CFG_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CFG_AWADDR\" :  \"" << s_axi_CFG_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CFG_WVALID\" :  \"" << s_axi_CFG_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CFG_WREADY\" :  \"" << s_axi_CFG_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CFG_WDATA\" :  \"" << s_axi_CFG_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CFG_WSTRB\" :  \"" << s_axi_CFG_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CFG_ARVALID\" :  \"" << s_axi_CFG_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CFG_ARREADY\" :  \"" << s_axi_CFG_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CFG_ARADDR\" :  \"" << s_axi_CFG_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CFG_RVALID\" :  \"" << s_axi_CFG_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CFG_RREADY\" :  \"" << s_axi_CFG_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CFG_RDATA\" :  \"" << s_axi_CFG_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CFG_RRESP\" :  \"" << s_axi_CFG_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CFG_BVALID\" :  \"" << s_axi_CFG_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CFG_BREADY\" :  \"" << s_axi_CFG_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CFG_BRESP\" :  \"" << s_axi_CFG_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

