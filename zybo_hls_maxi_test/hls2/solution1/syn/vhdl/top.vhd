-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
generic (
    C_M_AXI_CFG_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CFG_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CFG_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CFG_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CFG_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CFG_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CFG_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CFG_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CFG_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CFG_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CFG_USER_VALUE : INTEGER := 0;
    C_M_AXI_CFG_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CFG_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_CFG_AWVALID : OUT STD_LOGIC;
    m_axi_CFG_AWREADY : IN STD_LOGIC;
    m_axi_CFG_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CFG_ADDR_WIDTH-1 downto 0);
    m_axi_CFG_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CFG_ID_WIDTH-1 downto 0);
    m_axi_CFG_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CFG_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CFG_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CFG_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CFG_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CFG_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CFG_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CFG_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CFG_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CFG_AWUSER_WIDTH-1 downto 0);
    m_axi_CFG_WVALID : OUT STD_LOGIC;
    m_axi_CFG_WREADY : IN STD_LOGIC;
    m_axi_CFG_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CFG_DATA_WIDTH-1 downto 0);
    m_axi_CFG_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CFG_DATA_WIDTH/8-1 downto 0);
    m_axi_CFG_WLAST : OUT STD_LOGIC;
    m_axi_CFG_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CFG_ID_WIDTH-1 downto 0);
    m_axi_CFG_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CFG_WUSER_WIDTH-1 downto 0);
    m_axi_CFG_ARVALID : OUT STD_LOGIC;
    m_axi_CFG_ARREADY : IN STD_LOGIC;
    m_axi_CFG_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CFG_ADDR_WIDTH-1 downto 0);
    m_axi_CFG_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CFG_ID_WIDTH-1 downto 0);
    m_axi_CFG_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CFG_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CFG_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CFG_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CFG_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CFG_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CFG_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CFG_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CFG_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CFG_ARUSER_WIDTH-1 downto 0);
    m_axi_CFG_RVALID : IN STD_LOGIC;
    m_axi_CFG_RREADY : OUT STD_LOGIC;
    m_axi_CFG_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CFG_DATA_WIDTH-1 downto 0);
    m_axi_CFG_RLAST : IN STD_LOGIC;
    m_axi_CFG_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CFG_ID_WIDTH-1 downto 0);
    m_axi_CFG_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CFG_RUSER_WIDTH-1 downto 0);
    m_axi_CFG_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CFG_BVALID : IN STD_LOGIC;
    m_axi_CFG_BREADY : OUT STD_LOGIC;
    m_axi_CFG_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CFG_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CFG_ID_WIDTH-1 downto 0);
    m_axi_CFG_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CFG_BUSER_WIDTH-1 downto 0);
    s_axi_CFG_AWVALID : IN STD_LOGIC;
    s_axi_CFG_AWREADY : OUT STD_LOGIC;
    s_axi_CFG_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_ADDR_WIDTH-1 downto 0);
    s_axi_CFG_WVALID : IN STD_LOGIC;
    s_axi_CFG_WREADY : OUT STD_LOGIC;
    s_axi_CFG_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH-1 downto 0);
    s_axi_CFG_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH/8-1 downto 0);
    s_axi_CFG_ARVALID : IN STD_LOGIC;
    s_axi_CFG_ARREADY : OUT STD_LOGIC;
    s_axi_CFG_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_ADDR_WIDTH-1 downto 0);
    s_axi_CFG_RVALID : OUT STD_LOGIC;
    s_axi_CFG_RREADY : IN STD_LOGIC;
    s_axi_CFG_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH-1 downto 0);
    s_axi_CFG_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CFG_BVALID : OUT STD_LOGIC;
    s_axi_CFG_BREADY : IN STD_LOGIC;
    s_axi_CFG_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=38,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=631,HLS_SYN_LUT=826}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal values : STD_LOGIC_VECTOR (31 downto 0);
    signal CFG_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal CFG_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal CFG_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal CFG_AWVALID : STD_LOGIC;
    signal CFG_AWREADY : STD_LOGIC;
    signal CFG_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal CFG_WVALID : STD_LOGIC;
    signal CFG_WREADY : STD_LOGIC;
    signal CFG_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal CFG_ARREADY : STD_LOGIC;
    signal CFG_RVALID : STD_LOGIC;
    signal CFG_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal CFG_RLAST : STD_LOGIC;
    signal CFG_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal CFG_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CFG_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CFG_BVALID : STD_LOGIC;
    signal CFG_BREADY : STD_LOGIC;
    signal CFG_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CFG_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal CFG_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal values1_reg_138 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_ioackin_CFG_AWREADY : STD_LOGIC;
    signal j_1_fu_115_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_ioackin_CFG_WREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal j_reg_78 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_99_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_CFG_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_CFG_WREADY : STD_LOGIC := '0';
    signal tmp_1_fu_121_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_127_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component top_CFG_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        values : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_CFG_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    top_CFG_s_axi_U : component top_CFG_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CFG_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CFG_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CFG_AWVALID,
        AWREADY => s_axi_CFG_AWREADY,
        AWADDR => s_axi_CFG_AWADDR,
        WVALID => s_axi_CFG_WVALID,
        WREADY => s_axi_CFG_WREADY,
        WDATA => s_axi_CFG_WDATA,
        WSTRB => s_axi_CFG_WSTRB,
        ARVALID => s_axi_CFG_ARVALID,
        ARREADY => s_axi_CFG_ARREADY,
        ARADDR => s_axi_CFG_ARADDR,
        RVALID => s_axi_CFG_RVALID,
        RREADY => s_axi_CFG_RREADY,
        RDATA => s_axi_CFG_RDATA,
        RRESP => s_axi_CFG_RRESP,
        BVALID => s_axi_CFG_BVALID,
        BREADY => s_axi_CFG_BREADY,
        BRESP => s_axi_CFG_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        values => values);

    top_CFG_m_axi_U : component top_CFG_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 4,
        NUM_WRITE_OUTSTANDING => 4,
        MAX_READ_BURST_LENGTH => 4,
        MAX_WRITE_BURST_LENGTH => 4,
        C_M_AXI_ID_WIDTH => C_M_AXI_CFG_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CFG_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CFG_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CFG_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CFG_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CFG_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CFG_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CFG_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_CFG_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CFG_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CFG_CACHE_VALUE)
    port map (
        AWVALID => m_axi_CFG_AWVALID,
        AWREADY => m_axi_CFG_AWREADY,
        AWADDR => m_axi_CFG_AWADDR,
        AWID => m_axi_CFG_AWID,
        AWLEN => m_axi_CFG_AWLEN,
        AWSIZE => m_axi_CFG_AWSIZE,
        AWBURST => m_axi_CFG_AWBURST,
        AWLOCK => m_axi_CFG_AWLOCK,
        AWCACHE => m_axi_CFG_AWCACHE,
        AWPROT => m_axi_CFG_AWPROT,
        AWQOS => m_axi_CFG_AWQOS,
        AWREGION => m_axi_CFG_AWREGION,
        AWUSER => m_axi_CFG_AWUSER,
        WVALID => m_axi_CFG_WVALID,
        WREADY => m_axi_CFG_WREADY,
        WDATA => m_axi_CFG_WDATA,
        WSTRB => m_axi_CFG_WSTRB,
        WLAST => m_axi_CFG_WLAST,
        WID => m_axi_CFG_WID,
        WUSER => m_axi_CFG_WUSER,
        ARVALID => m_axi_CFG_ARVALID,
        ARREADY => m_axi_CFG_ARREADY,
        ARADDR => m_axi_CFG_ARADDR,
        ARID => m_axi_CFG_ARID,
        ARLEN => m_axi_CFG_ARLEN,
        ARSIZE => m_axi_CFG_ARSIZE,
        ARBURST => m_axi_CFG_ARBURST,
        ARLOCK => m_axi_CFG_ARLOCK,
        ARCACHE => m_axi_CFG_ARCACHE,
        ARPROT => m_axi_CFG_ARPROT,
        ARQOS => m_axi_CFG_ARQOS,
        ARREGION => m_axi_CFG_ARREGION,
        ARUSER => m_axi_CFG_ARUSER,
        RVALID => m_axi_CFG_RVALID,
        RREADY => m_axi_CFG_RREADY,
        RDATA => m_axi_CFG_RDATA,
        RLAST => m_axi_CFG_RLAST,
        RID => m_axi_CFG_RID,
        RUSER => m_axi_CFG_RUSER,
        RRESP => m_axi_CFG_RRESP,
        BVALID => m_axi_CFG_BVALID,
        BREADY => m_axi_CFG_BREADY,
        BRESP => m_axi_CFG_BRESP,
        BID => m_axi_CFG_BID,
        BUSER => m_axi_CFG_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => CFG_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => CFG_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => CFG_RDATA,
        I_RID => CFG_RID,
        I_RUSER => CFG_RUSER,
        I_RRESP => CFG_RRESP,
        I_RLAST => CFG_RLAST,
        I_AWVALID => CFG_AWVALID,
        I_AWREADY => CFG_AWREADY,
        I_AWADDR => CFG_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_20,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => CFG_WVALID,
        I_WREADY => CFG_WREADY,
        I_WDATA => CFG_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => CFG_BVALID,
        I_BREADY => CFG_BREADY,
        I_BRESP => CFG_BRESP,
        I_BID => CFG_BID,
        I_BUSER => CFG_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_CFG_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_CFG_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_CFG_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_CFG_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = CFG_AWREADY)) then 
                        ap_reg_ioackin_CFG_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_CFG_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_CFG_WREADY <= ap_const_logic_0;
            else
                if (((tmp_fu_109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    if ((ap_const_boolean_0 = ap_block_state3_io)) then 
                        ap_reg_ioackin_CFG_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = CFG_WREADY)) then 
                        ap_reg_ioackin_CFG_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    j_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_109_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_78 <= j_1_fu_115_p2;
            elsif (((ap_sig_ioackin_CFG_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_78 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                values1_reg_138 <= values(31 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_fu_109_p2, ap_CS_fsm_state7, CFG_BVALID, ap_sig_ioackin_CFG_AWREADY, ap_block_state3_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_CFG_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_fu_109_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((tmp_fu_109_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = CFG_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    CFG_AWADDR <= tmp_4_fu_99_p1(32 - 1 downto 0);

    CFG_AWVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_CFG_AWREADY)
    begin
        if (((ap_reg_ioackin_CFG_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            CFG_AWVALID <= ap_const_logic_1;
        else 
            CFG_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    CFG_BREADY_assign_proc : process(ap_CS_fsm_state7, CFG_BVALID)
    begin
        if (((ap_const_logic_1 = CFG_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            CFG_BREADY <= ap_const_logic_1;
        else 
            CFG_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    CFG_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_127_p2),32));

    CFG_WVALID_assign_proc : process(ap_CS_fsm_state3, tmp_fu_109_p2, ap_reg_ioackin_CFG_WREADY)
    begin
        if (((tmp_fu_109_p2 = ap_const_lv1_0) and (ap_reg_ioackin_CFG_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            CFG_WVALID <= ap_const_logic_1;
        else 
            CFG_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    CFG_blk_n_AW_assign_proc : process(m_axi_CFG_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            CFG_blk_n_AW <= m_axi_CFG_AWREADY;
        else 
            CFG_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    CFG_blk_n_B_assign_proc : process(m_axi_CFG_BVALID, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            CFG_blk_n_B <= m_axi_CFG_BVALID;
        else 
            CFG_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    CFG_blk_n_W_assign_proc : process(m_axi_CFG_WREADY, ap_CS_fsm_state3, tmp_fu_109_p2)
    begin
        if (((tmp_fu_109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            CFG_blk_n_W <= m_axi_CFG_WREADY;
        else 
            CFG_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state3_io_assign_proc : process(tmp_fu_109_p2, ap_sig_ioackin_CFG_WREADY)
    begin
                ap_block_state3_io <= ((tmp_fu_109_p2 = ap_const_lv1_0) and (ap_sig_ioackin_CFG_WREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7, CFG_BVALID)
    begin
        if (((ap_const_logic_1 = CFG_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, CFG_BVALID)
    begin
        if (((ap_const_logic_1 = CFG_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_CFG_AWREADY_assign_proc : process(CFG_AWREADY, ap_reg_ioackin_CFG_AWREADY)
    begin
        if ((ap_reg_ioackin_CFG_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_CFG_AWREADY <= CFG_AWREADY;
        else 
            ap_sig_ioackin_CFG_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_CFG_WREADY_assign_proc : process(CFG_WREADY, ap_reg_ioackin_CFG_WREADY)
    begin
        if ((ap_reg_ioackin_CFG_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_CFG_WREADY <= CFG_WREADY;
        else 
            ap_sig_ioackin_CFG_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    j_1_fu_115_p2 <= std_logic_vector(unsigned(j_reg_78) + unsigned(ap_const_lv6_1));
    tmp_1_fu_121_p2 <= std_logic_vector(shift_left(unsigned(j_reg_78),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    tmp_2_fu_127_p2 <= (tmp_1_fu_121_p2 or ap_const_lv6_1);
    tmp_4_fu_99_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(values1_reg_138),64));
    tmp_fu_109_p2 <= "1" when (j_reg_78 = ap_const_lv6_20) else "0";
end behav;
